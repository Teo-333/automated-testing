import { test, expect } from '@playwright/test'
import { Container } from '../../patterns/di/Container'
import { StandardLoginStrategy } from '../../patterns/strategy/StandardLoginStrategy'
import { UserBuilder } from '../../patterns/builder/UserBuilder'
import { PageFactory } from '../../pages/PageFactory'

test.describe('Checkout Process Tests', () => {
  test('Test Case 5: Verify Checkout Process', async ({ page }) => {
    const container = new Container()
    container.register('loginStrategy', new StandardLoginStrategy())
    const loginStrategy = container.resolve<StandardLoginStrategy>('loginStrategy')
    const user = new UserBuilder()
      .withUsername('standard_user')
      .withPassword('secret_sauce')
      .build()
    const loginPage = PageFactory.get('login', page)
    await loginPage.navigate()
    await loginStrategy.login(page, user.username, user.password)
    const inventoryPage = PageFactory.get('inventory', page)
    await (inventoryPage as any).addItemToCart('Sauce Labs Backpack')
    await (inventoryPage as any).goToCart()
    const cartPage = PageFactory.get('cart', page)
    await (cartPage as any).isItemVisible('Sauce Labs Backpack')
    await (cartPage as any).proceedToCheckout()
    const checkoutPage = PageFactory.get('checkout', page)
    await (checkoutPage as any).enterFirstName('John')
    await (checkoutPage as any).enterLastName('Dou')
    await (checkoutPage as any).enterPostalCode('12345')
    await (checkoutPage as any).clickContinue()
    const summaryTotal = await (checkoutPage as any).getSummaryTotal()
    expect(summaryTotal).toBe('Total: $32.39')
    await (checkoutPage as any).clickFinish()
    const completeOrderHeader = await (checkoutPage as any).getCompleteOrderHeader()
    expect(completeOrderHeader).toBe('Thank you for your order!')
  })

  test('Test Case 6: Verify Checkout Process for multiple items', async ({ page }) => {
    const container = new Container()
    container.register('loginStrategy', new StandardLoginStrategy())
    const loginStrategy = container.resolve<StandardLoginStrategy>('loginStrategy')
    const user = new UserBuilder()
      .withUsername('standard_user')
      .withPassword('secret_sauce')
      .build()
    const loginPage = PageFactory.get('login', page)
    await loginPage.navigate()
    await loginStrategy.login(page, user.username, user.password)
    const inventoryPage = PageFactory.get('inventory', page)
    await (inventoryPage as any).addItemToCart('Sauce Labs Backpack')
    let cartBadge = await (inventoryPage as any).getCartBadge()
    expect(cartBadge).toBe('1')
    await (inventoryPage as any).addItemToCart('Sauce Labs Bike Light')
    cartBadge = await (inventoryPage as any).getCartBadge()
    expect(cartBadge).toBe('2')
    await (inventoryPage as any).goToCart()
    const cartPage = PageFactory.get('cart', page)
    const cartItemsCount = await (cartPage as any).getCartItemsCount()
    expect(cartItemsCount).toBe('2')
    const isBackpackVisible = await (cartPage as any).isItemVisible('Sauce Labs Backpack')
    const isBikeLightVisible = await (cartPage as any).isItemVisible('Sauce Labs Bike Light')
    expect(isBackpackVisible).toBeTruthy()
    expect(isBikeLightVisible).toBeTruthy()
    await (cartPage as any).proceedToCheckout()
    const checkoutPage = PageFactory.get('checkout', page)
    await (checkoutPage as any).enterFirstName('John')
    await (checkoutPage as any).enterLastName('Dou')
    await (checkoutPage as any).enterPostalCode('12345')
    await (checkoutPage as any).clickContinue()
    const summaryTotal = await (checkoutPage as any).getSummaryTotal()
    expect(summaryTotal).toBe('Total: $43.18')
    await (checkoutPage as any).clickFinish()
    const completeOrderHeader = await (checkoutPage as any).getCompleteOrderHeader()
    expect(completeOrderHeader).toBe('Thank you for your order!')
  })
})
